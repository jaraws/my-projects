package jaraws.hibernate;

public class ReadMe {

	/*
	 * Hibernate Inheritance: TABLE PER CLASS STRATEGY
	 * ---------------------------------------------
	 *
	 * As the strategy name itself suggests that in this strategy a table is created per class in the
	 * hierarchy. But it duplicates the properties which are inherited from parent class; and the inherited
	 * properties will be having the corresponding columns in their respective tables. For example:
	 * If there are 2 properties in parent class and there are 5 sub classes, then the 2 properties of the
	 * parent classes will be duplicated to 5 sub classes. 
	 * 
	 * Since, a table gets created per class therefore there would no need of annotation 
	 * @DiscriminatorColumn is required to differentiate one type instance with the other.
	 * 
	 * Sub classes not only inherits the properties, but they also inherits the annotation along with
	 * them. For example, if the member variable 'id' is annotated with an annotation like @Id, @Generated 
	 * etc, then the child class will also inherit the 'id' member variable along with its  annotation in
	 * the parent class.
	 * 
	 * Every table corresponding to a class will only possess the columns corresponding to its members
	 * variables. These member variables might be from the same class or might be inherited from the
	 * super class.  
	 * 
	 * This is achieved using annotation: 
	 * @Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)
	 * 
	 * This results into a normalized table structure with no redundant column in the table.
	 * 
	 * THIS STRATEGY GENERATES TABLES WHICH ARE MORE NORMALIZED THEN SINGLE TABLE STRATEGY BECAUSE IN SINGLE TABLE
	 * STRATEGY WE HAD NULL FOR MOST OF THE COLUMNS. 
	 *
	 * But in TABLE PER CLASS STRATEGY, the inherited member variable columns are repeated in all the tables of
	 * sub classes which are redundant across the tables generated by the Hibernate.
	 * 
	 * 
	 */
}