<?xml version='1.0' encoding='UTF-8'?>  
<!DOCTYPE hibernate-configuration PUBLIC  
          "-//Hibernate/Hibernate Configuration DTD 3.0//EN"  
          "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
	<session-factory>
		<property name="connection.url">jdbc:mysql://localhost:3306/school</property>
		<property name="connection.username">test</property>
		<property name="connection.password">test</property>
		<property name="connection.driver_class">com.mysql.jdbc.Driver</property>

		<property name="dialect">org.hibernate.dialect.MySQL5Dialect</property>

		<!-- IF to Drop and recreate the schema on application startup -->
		<property name="hbm2ddl.auto">validate</property>
		<!-- echo all executed sqls -->
		<property name="hibernate.show_sql">true</property>
		<!-- <property name="hibernate.use_sql_comments">true</property> -->
		<!-- <property name="hibernate.format_sql">true</property> -->
		
		<!-- Defining the schema name is considered as good otherwise some JPA implementations
			 uses a default schema name and it at times becomes difficult to debug.
			 
			 THE POINT TO NOTE HERE IS THAT, IN MYSQL BOTH DATABASE NAME AND SCHEMA NAME
			 ARE SIMILAR THINGS, HOWEVER IN ORACLE, DB2 AND MICROSOFT SQL SERVER BOTH ARE 
			 DIFFERENT. Schema is nothing but the logical grouping of database objects like
			 tables, procedures, indexes etc. So, if you are using MySql Server, there is no
			 need to define this property as both the values will be same.
			 
			 <property name="hibernate.default_schema">test</property>
			 -->
		
		
		<!-- List of mapping files -->
		<!-- Since, its an annotation based application. It's not required to create 
			 the Hibernate mapping file with all persistence information related to the 
			 entity class. 
			 Here, we are only providing the mapping class having persistence information 
			 provided through annotations otherwise this would have been provided by means
			 of a Hibernate Mapping File i.e. .hbm.xml file. 
			 -->
		<mapping class="jaraws.hibernate.model.UserDetails" />
		<mapping class="jaraws.hibernate.model.UserDetailsAuto" />
		<mapping class="jaraws.hibernate.model.UserDetailsIdentity" />
		<!-- Below line is commented as MySQL does not support sequences -->
		<!-- <mapping class="jaraws.hibernate.model.UserDetailsSequence" /> -->
		<mapping class="jaraws.hibernate.model.UserDetailsTable" />

	</session-factory>
</hibernate-configuration> 