/*
	-------------------------------------------------------------------------------------
	jstack Command to take the thread dump >> jstack -l process_id > deadLock.tdump
	-------------------------------------------------------------------------------------
	Following is the thread dump generated by the program below, which clearly states
	that object for which one thread is looking to acquire the lock over is already 
	being held by another thread.
	-------------------------------------------------------------------------------------
	-------------------------------------------------------------------------------------
	2015-12-30 11:32:46
		Full thread dump Java HotSpot(TM) Client VM (25.51-b03 mixed mode, sharing):

		"DestroyJavaVM" #10 prio=5 os_prio=0 tid=0x015fbc00 nid=0x1c54 waiting on condition [0x00000000]
		   java.lang.Thread.State: RUNNABLE

		   Locked ownable synchronizers:
			- None

		"t2:2" #9 prio=5 os_prio=0 tid=0x147fec00 nid=0x14c0 waiting for monitor entry [0x13d9f000]
		   java.lang.Thread.State: BLOCKED (on object monitor)
			at DeadLockThreadTwo.run(DeadLockExample.java:96)
			- waiting to lock <0x03c74438> (a LockObject)
			- locked <0x03c74480> (a LockObject)

		   Locked ownable synchronizers:
			- None

		"t1:1" #8 prio=5 os_prio=0 tid=0x147fa800 nid=0x144c waiting for monitor entry [0x14f8f000]
		   java.lang.Thread.State: BLOCKED (on object monitor)
			at DeadLockThreadOne.run(DeadLockExample.java:50)
			- waiting to lock <0x03c74480> (a LockObject)
			- locked <0x03c74438> (a LockObject)

		   Locked ownable synchronizers:
			- None

		"Service Thread" #7 daemon prio=9 os_prio=0 tid=0x011fcc00 nid=0x1a74 runnable [0x00000000]
		   java.lang.Thread.State: RUNNABLE

		   Locked ownable synchronizers:
			- None

		"C1 CompilerThread0" #6 daemon prio=9 os_prio=2 tid=0x011bdc00 nid=0x1b28 waiting on condition [0x00000000]
		   java.lang.Thread.State: RUNNABLE

		   Locked ownable synchronizers:
			- None

		"Attach Listener" #5 daemon prio=5 os_prio=2 tid=0x011bcc00 nid=0x1e80 runnable [0x00000000]
		   java.lang.Thread.State: RUNNABLE

		   Locked ownable synchronizers:
			- None

		"Signal Dispatcher" #4 daemon prio=9 os_prio=2 tid=0x011b9800 nid=0x87c runnable [0x00000000]
		   java.lang.Thread.State: RUNNABLE

		   Locked ownable synchronizers:
			- None

		"Finalizer" #3 daemon prio=8 os_prio=1 tid=0x01156000 nid=0xfb4 in Object.wait() [0x015af000]
		   java.lang.Thread.State: WAITING (on object monitor)
			at java.lang.Object.wait(Native Method)
			- waiting on <0x03c06dd0> (a java.lang.ref.ReferenceQueue$Lock)
			at java.lang.ref.ReferenceQueue.remove(Unknown Source)
			- locked <0x03c06dd0> (a java.lang.ref.ReferenceQueue$Lock)
			at java.lang.ref.ReferenceQueue.remove(Unknown Source)
			at java.lang.ref.Finalizer$FinalizerThread.run(Unknown Source)

		   Locked ownable synchronizers:
			- None

		"Reference Handler" #2 daemon prio=10 os_prio=2 tid=0x01151000 nid=0x1a70 in Object.wait() [0x0164f000]
		   java.lang.Thread.State: WAITING (on object monitor)
			at java.lang.Object.wait(Native Method)
			- waiting on <0x03c068c8> (a java.lang.ref.Reference$Lock)
			at java.lang.Object.wait(Unknown Source)
			at java.lang.ref.Reference$ReferenceHandler.run(Unknown Source)
			- locked <0x03c068c8> (a java.lang.ref.Reference$Lock)

		   Locked ownable synchronizers:
			- None

		"VM Thread" os_prio=2 tid=0x0114fc00 nid=0x180c runnable 

		"VM Periodic Task Thread" os_prio=2 tid=0x0120e000 nid=0x1c2c waiting on condition 

		JNI global references: 5


		Found one Java-level deadlock:
		=============================
		"t2:2":
		  waiting to lock monitor 0x01155ddc (object 0x03c74438, a LockObject),
		  which is held by "t1:1"
		"t1:1":
		  waiting to lock monitor 0x0115424c (object 0x03c74480, a LockObject),
		  which is held by "t2:2"

		Java stack information for the threads listed above:
		===================================================
		"t2:2":
			at DeadLockThreadTwo.run(DeadLockExample.java:96)
			- waiting to lock <0x03c74438> (a LockObject)
			- locked <0x03c74480> (a LockObject)
		"t1:1":
			at DeadLockThreadOne.run(DeadLockExample.java:50)
			- waiting to lock <0x03c74480> (a LockObject)
			- locked <0x03c74438> (a LockObject)

		Found 1 deadlock.

	-------------------------------------------------------------------------------------
*/
class LockObject{
	String name;
	
	LockObject(String name){
		this.name = name;
	}
	
	public String toString(){
		return name;
	}
}
class DeadLockThreadOne extends Thread{
	
	Object obj1;
	Object obj2;
	
	DeadLockThreadOne(String threadName, Object obj1, Object obj2){
		super(threadName);
		this.obj1 = obj1;
		this.obj2 = obj2;
	}
	
	/*
		Let the thread do some work for a while
	*/
	private void work() {
        try {
            Thread.sleep(20000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
	
	/*
		Overriding run method
	*/
	public void run(){
		
		String name = Thread.currentThread().getName();
        System.out.println(name + " acquiring lock on "+obj1);
		
		synchronized (obj1) {
			 System.out.println(name + " acquired lock on "+obj1);
			 // lets do some work
			 work();
			 System.out.println(name + " acquiring lock on "+obj2);
			 
			 synchronized (obj2) {
				System.out.println(name + " acquired lock on "+obj2);
				work();
			}
         System.out.println(name + " released lock on "+obj2);
        }
        System.out.println(name + " released lock on "+obj1);
        System.out.println(name + " finished execution.");
	}
}
class DeadLockThreadTwo extends Thread{
	
	Object obj1;
	Object obj2;
	
	DeadLockThreadTwo(String threadName, Object obj1, Object obj2){
		super(threadName);
		this.obj1 = obj1;
		this.obj2 = obj2;
	}
	
	/*
		Let the thread do some work for a while
	*/
	private void work() {
        try {
            Thread.sleep(20000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
	
	/*
		Overriding run method
	*/
	public void run(){
		
		String name = Thread.currentThread().getName();
        System.out.println(name + " acquiring lock on "+obj2);
		
		synchronized (obj2) {
			 System.out.println(name + " acquired lock on "+obj2);
			 // lets do some work
			 work();
			 System.out.println(name + " acquiring lock on "+obj1);
			 
			 synchronized (obj1) {
				System.out.println(name + " acquired lock on "+obj1);
				work();
			}
         System.out.println(name + " released lock on "+obj1);
        }
        System.out.println(name + " released lock on "+obj2);
        System.out.println(name + " finished execution.");
	}
}
class DeadLockExample{

	public static void main(String args[]) throws Exception {
		
		int threadId = 1;
		
		Object obj1 = new LockObject("LockObject-1");
        Object obj2 = new LockObject("LockObject-2");
     
		//do{
			Thread t1 = new DeadLockThreadOne("t1:"+(threadId++),obj1, obj2);
			Thread t2 = new DeadLockThreadTwo("t2:"+(threadId++),obj1, obj2);
			
			t1.start();
			Thread.sleep(5000);
			t2.start();
			Thread.sleep(5000);
		//}while(true);
	}
}